#!/usr/bin/env python

import os
import json
import math
import re
from urllib.parse import urljoin
import logging
from datetime import datetime, timedelta, date
import requests
from requests.packages.urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter
from pyproj import Proj, transform

logger = logging.getLogger(__name__)
logging.basicConfig(
    format='%(asctime)s %(levelname)-8s %(message)s',
    filename='portland-permits.log',
    level=logging.DEBUG)

lag_days = 21
date_format = '%m/%d/%Y'
api_url = 'https://www.portlandmaps.com/api/'
from_date = datetime.now() - timedelta(days=lag_days)
per_page = 1000
exclude_keys = ['neighborhood_coalition',
                'business_association',
                'ccb_number',
                'application_number',
                'state_id']

from_projection = Proj(init='epsg:3857')
to_projection = Proj(init='epsg:4326')

session = requests.Session()
retries = Retry(total=5,
                backoff_factor=0.5,
                status_forcelist=[500, 502, 503, 504])

session.mount('https://', HTTPAdapter(max_retries=retries))


def serialize_json_with_dates(obj):
    if isinstance(obj, datetime):
        return str(obj.date())
    if isinstance(obj, date):
        return str(obj)

    raise TypeError('Type {} is not serializable'.format(type(obj)))


def fetch_permits(query={}):
    date_format = '%m/%d/%Y'
    from_date = (datetime.now() - timedelta(days=lag_days)).strftime(date_format)
    to_date = datetime.today().strftime(date_format)
    defaults = {
        'date_from': from_date,
        'date_to': to_date,
        'sort_field': 'application_number',
        'sort_order': 'desc',
        'format': 'json',
        'api_key': os.environ['PORTLAND_DEV_API_KEY']
    }

    params = {**defaults, **query}
    response = session.get(urljoin(api_url, 'permit/'), params=params)
    response.raise_for_status()
    return response


def fetch_all_permits():
    page = 1
    while True:
        try:
            response = fetch_permits(query={'page': page})
            response.raise_for_status()
        except requests.HTTPError as e:
            logger.error('Failed fetching data. {}'.format(e))

        try:
            permit_json = response.json()
            if 'error' in permit_json:
                logging.error("Error in JSON response. {}".format(permit_json['error']))
                return False

            results = permit_json['results']
            total_count = permit_json['total']
            results_count = len(results)
            total_pages = math.ceil(total_count / per_page)
            page = page + 1

            yield results

            if page > total_pages:
                return False
        except ValueError as e:
            logging.error("Failed parsing response json. {}".format(e))


# The data from Portland is in EPSG:3857 (Web Mercator), and we want to transform it into a format
# that's easier to work with on the web in EPSG:4236.
def transform_xy(permit):
    cur_x = permit.pop('x_web_mercator')
    cur_y = permit.pop('y_web_mercator')
    if cur_x and cur_y:
        x, y = transform(from_projection, to_projection, cur_x, cur_y)
        permit['x'] = x
        permit['y'] = y


# Shorten neighborhod names from long names to their more commonly referenced short names.
def format_neighborhood(permit):
    if permit['neighborhood']:
        name = permit['neighborhood']
        removed_na = re.sub(r"(community|neighborhood)? association", '', name, flags=re.IGNORECASE)
        removed_na = removed_na.replace('Neighborhood District (HAND)', '')
        removed_na = removed_na.replace('Foothills League', '')
        removed_na = removed_na.replace('Improvement League (SMILE)', '')
        stripped_nh = removed_na.strip()
        permit['neighborhood'] = stripped_nh


def extract_date(permit):
    permit_date = permit['final'] or permit['issued'] or permit['under_review']
    real_date = datetime.strptime(permit_date, '%Y-%m-%d %H:%M:%S')
    permit['date'] = real_date


out_data = []
for permits in fetch_all_permits():
    for permit in permits:

        work = permit['work'] or permit['type']
        if work and 'addition' in work.lower():
            continue

        try:
            extract_date(permit)
        except Exception as e:
            continue

        # For some reason the date ended up being before the cut off.  Usually due to an
        # poor date in the form of an incorrect 'final' date.
        if permit['date'] < from_date:
            continue

        [permit.pop(key) for key in exclude_keys]
        transform_xy(permit)
        format_neighborhood(permit)
        out_data.append(permit)

out_data = sorted(out_data, key=lambda k: k['date'], reverse=True)

with open('public/data.json', 'w') as f:
    json.dump(out_data, f, default=serialize_json_with_dates)
