#!/usr/bin/env python

import os
import json
from urllib.parse import urljoin
import logging
from datetime import datetime, timedelta
import requests
from requests.packages.urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

logger = logging.getLogger(__name__)
logging.basicConfig(
    format='%(asctime)s %(levelname)-8s %(message)s',
    filename='portland-permits.log',
    level=logging.DEBUG)

date_format = '%m/%d/%Y'
api_url = 'https://www.portlandmaps.com/api/'
from_date = datetime.now() - timedelta(days=30)

session = requests.Session()
retries = Retry(total=5,
                backoff_factor=0.5,
                status_forcelist=[500, 502, 503, 504])

session.mount('https://', HTTPAdapter(max_retries=retries))


def fetch_permit_data(date_from, date_to=datetime.today().strftime(date_format)):
    params = {
        'date_type': 'issued',
        'date_from': date_from,
        'date_to': date_to,
        'sort_field': 'issued',
        'sort_order': 'desc',
        'format': 'json',
        'api_key': os.environ['PORTLAND_DEV_API_KEY']
    }

    response = session.get(urljoin(api_url, 'permit/'), params=params)
    response.raise_for_status()
    return response


def fetch_landuse_data(date_from, date_to=datetime.today().strftime(date_format)):
    params = {
        'date_from': date_from,
        'date_to': date_to,
        'sort_field': 'intake_complete',
        'sort_order': 'desc',
        'format': 'json',
        'api_key': os.environ['PORTLAND_DEV_API_KEY']
    }

    response = session.get(urljoin(api_url, 'landuse/'), params=params)
    response.raise_for_status()
    return response


try:
    permit_response = fetch_permit_data(date_from=from_date.strftime(date_format))
    landuse_response = fetch_landuse_data(date_from=from_date.strftime(date_format))
except requests.HTTPError as e:
    logger.error('Failed fetching data. {}'.format(e))

try:
    permit_json = permit_response.json()
    landuse_json = landuse_response.json()
except ValueError as e:
    logging.error("Failed parsing response json. {}".format(e))


if 'error' not in permit_json and 'error' not in landuse_json:
    total_permits = permit_json['total']
    total_landuse = landuse_json['total']
    logging.info('Fetched {} permits and {} landuse reviews'.format(total_permits, total_landuse))

    out_data = []
    for permit in permit_json['results']:
        permit['date'] = permit['issued']
        permit['ptype'] = 1
        out_data.append(permit)

    for landuse in landuse_json['results']:
        landuse['date'] = landuse['intake_complete']
        landuse['ptype'] = 2
        out_data.append(landuse)

    with open('public/data.json', 'w') as f:
        json.dump(out_data, f)
else:
    logging.error('Permit response: {}'.format(permit_json))
    logging.error('Landuse response: {}'.format(landuse_json))
